{"version":3,"sources":["changelly-logo.png","Componenets/StatusBox.js","Componenets/TxSearchBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","apiKey","process","REACT_APP_APIKey","apiSecret","REACT_APP_APISecret","changelly","Changelly","StatusBox","state","helperText","id","status","handleIDChange","event","setState","target","value","handleSearch","length","getStatus","then","catch","error","message","Grid","container","item","xs","direction","justify","alignItems","FormControl","TextField","size","variant","this","label","onChange","Button","onClick","Component","HistoryBox","input","page","filter","rows","handleFilterChange","offset","handleInputChange","limit","key","console","log","getTransactions","result","handlePageChange","columns","minWidth","format","timeStamp","Date","toISOString","align","InputLabel","Select","MenuItem","Paper","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","style","TableBody","row","hover","role","tabIndex","App","className","alt","src","changellyImg","width","sm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dfff7c93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/changelly-logo.1cd0e575.png\";","import React, { Component } from 'react'\n\nimport { Button, FormControl, TextField, Grid } from '@material-ui/core'\n\n// import { apiKey, apiSecret } from '../config'\nimport { Changelly } from 'changelly-js'\n\nconst apiKey = process.env.REACT_APP_APIKey\nconst apiSecret = process.env.REACT_APP_APISecret\n\nconst changelly = new Changelly(apiKey, apiSecret)\n\nexport default class StatusBox extends Component {\n  state = {\n    helperText: null,\n    id: '',\n    status: 'status',\n  }\n\n  handleIDChange = event => {\n    this.setState({ id: event.target.value })\n  }\n\n  handleSearch = () => {\n    const id = this.state.id\n    if (id.length !== 16) {\n      this.setState({ helperText: 'Wrong ID Length' })\n    } else {\n      changelly\n        .getStatus(id)\n        .then(status => {\n          this.setState({ status })\n        })\n        .catch(error => {\n          this.setState({ helperText: error.message })\n        })\n    }\n  }\n\n  render() {\n    return (\n      <Grid container item xs={12}>\n        <Grid container direction='row' justify='space-between' alignItems='flex-start'>\n          <Grid container item xs={2} alignItems='flex-start'>\n            <h4> Search By ID </h4>\n          </Grid>\n          <Grid container item xs={6} alignItems='flex-start'>\n            <FormControl>\n              <TextField\n                size='small'\n                variant='outlined'\n                value={this.state.id}\n                label='id'\n                helperText={this.state.helperText}\n                onChange={this.handleIDChange}\n              ></TextField>\n            </FormControl>\n          </Grid>\n          <Grid container item xs={2} alignItems='flex-start'>\n            <Button variant='outlined' onClick={this.handleSearch}>\n              Search{' '}\n            </Button>\n          </Grid>\n          <Grid container item xs={2}>\n            <p> {this.state.status} </p>\n          </Grid>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nimport {\n  Button,\n  FormControl,\n  TextField,\n  Grid,\n  InputLabel,\n  Select,\n  MenuItem,\n  Paper,\n  TableCell,\n  TableBody,\n  Table,\n  TableHead,\n  TableRow,\n} from '@material-ui/core'\n\n// import { apiKey, apiSecret } from '../config'\nimport { Changelly } from 'changelly-js'\n\nconst apiKey = process.env.REACT_APP_APIKey\nconst apiSecret = process.env.REACT_APP_APISecret\n\nconst changelly = new Changelly(apiKey, apiSecret)\n\nexport default class HistoryBox extends Component {\n  state = {\n    helperText: null,\n    input: '',\n    page: 1,\n    filter: 'currency',\n    rows: [],\n  }\n\n  handleFilterChange = event => {\n    this.setState({ offset: 0 })\n    this.setState({ filter: event.target.value })\n  }\n\n  handleInputChange = event => {\n    // this.setState({ offset: 0 })\n    this.setState({ input: event.target.value })\n  }\n\n  handleSearch = () => {\n    const limit = 10;\n    const page = this.state.page\n    const filter = {\n      offset: (page-1)* limit,\n      limit,\n    }\n    const key = this.state.filter\n    const value = this.state.input\n    filter[key] = value\n\n    console.log(filter)\n    changelly.getTransactions(filter).then(result => {\n      this.setState({ rows: result })\n    })\n  }\n\n  handlePageChange = (event) => {\n    this.setState({ page: event.target.value })\n  }\n\n  render() {\n    const columns = [\n      { id: 'id', label: 'ID', minWidth: 120 },\n      { id: 'createdAt', label: 'Created', minWidth: 100, format: timeStamp => new Date(timeStamp*1000).toISOString() },\n      { id: 'status', label: 'Status', minWidth: 100 },\n      { id: 'currencyFrom', label: 'From', minWidth: 50 },\n      { id: 'currencyTo', label: 'To', minWidth: 50 },\n      {\n        id: 'payinAddress',\n        label: 'Payin Address',\n        minWidth: 350,\n        align: 'left',\n      },\n      {\n        id: 'payoutAddress',\n        label: 'Payout Address',\n        minWidth: 350,\n        align: 'left',\n      },\n      {\n        id: 'amountExpectedTo',\n        label: 'Expect Amount',\n        minWidth: 150,\n        align: 'left',\n      },\n    ]\n\n    return (\n      <Grid container item xs={12}>\n        <Grid container direction='row' justify='space-between' alignItems='flex-start'>\n          <Grid container item xs={2} alignItems='flex-start'>\n            <h4> Filter Records </h4>\n          </Grid>\n\n          <Grid container item xs={2} alignItems='flex-start'>\n            <FormControl>\n              <TextField\n                size='small'\n                variant='outlined'\n                value={this.state.id}\n                label={this.state.filter}\n                helperText={this.state.helperText}\n                onChange={this.handleInputChange}\n              ></TextField>\n            </FormControl>\n          </Grid>\n          <Grid container item xs={4} alignItems='flex-start'>\n            <FormControl variant='outlined' size='small'>\n              <InputLabel id='demo-simple-select-helper-label'>Filter</InputLabel>\n              <Select value={this.state.filter} onChange={this.handleFilterChange}>\n                <MenuItem value='currency'>\n                  <em>currency</em>\n                </MenuItem>\n                <MenuItem value='address'>address</MenuItem>\n                <MenuItem value='extraId'>extraId</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid container item xs={2} alignItems='flex-start'>\n            <Button variant='outlined' onClick={this.handleSearch}>\n              Search{' '}\n            </Button>\n          </Grid>\n\n          <Grid container item xs={2} alignItems='flex-start'>\n            <FormControl>\n              <TextField\n                size='small'\n                variant='outlined'\n                value={this.state.page}\n                label='Page'\n                onChange={this.handlePageChange}\n              ></TextField>\n            </FormControl>\n          </Grid>\n        </Grid>\n\n        <Grid>\n          <Paper>\n            {/* <TableContainer> */}\n            <Table stickyHeader aria-label='sticky table'>\n              <TableHead>\n                <TableRow>\n                  {columns.map(column => (\n                    <TableCell key={column.id} align={column.align} style={{ minWidth: column.minWidth }}>\n                      {column.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {this.state.rows.map(row => {\n                  return (\n                    <TableRow hover role='checkbox' tabIndex={-1} key={row.id}>\n                      {columns.map(column => {\n                        const value = row[column.id]\n                        return (\n                          <TableCell key={column.id} align={column.align}>\n                            {column.format && typeof value === 'number' ? column.format(value) : value}\n                          </TableCell>\n                        )\n                      })}\n                    </TableRow>\n                  )\n                })}\n              </TableBody>\n            </Table>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n","import React from 'react';\nimport StatusBox from './Componenets/StatusBox'\nimport SearchBox from './Componenets/TxSearchBox'\nimport Grid from '@material-ui/core/Grid'\nimport changellyImg from './changelly-logo.png'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <header className=\"App-header\">\n      <img alt={'logo'} src={changellyImg} width={500} ></img>\n      <Grid item xs={11}\n        sm={10}\n        container\n        direction=\"row\"\n      >\n          <StatusBox/>\n          <SearchBox/>\n      </Grid>\n        \n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}